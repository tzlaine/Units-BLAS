[/
 / Copyright (c) 2008 T. Zachary Laine
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:adapting Adapting UnitsBlas To Other Units Libraries]

UnitsBlas works with fundamental numeric types and Boost.Units quantities (or
even a mixture of the two) "out of the box".  If users want to use it with other
units libraries (e.g. Andy Little's Quan library), there are several template
specializations that must be supplied.  For instance, elements in a _matrix_ can
be assigned values from fundamental numeric types, whether the elements
themselves are fundamental numeric types, Boost.Units types, or Quan types.
However, the code that performs the assignment is very different in these three
cases.  Below is a summary of every such template specialization that a user
must supply, and details the user should know about each.  Note that the
specializations must appear in the template's original namespace.

[heading `detail::is_dimensionless<>`]

`is_dimensionless<T>::type` is `mpl::true_` if `T` is dimensionless, or
`mpl::false_` otherwise.

Found in `boost/units_blas/detail/lu.hpp`.

[heading `detail::unit_of<>`]

`unit_of<T>::type` is type representing the unit of `T`, or `mpl::void_` if none
exists.

Found in `boost/units_blas/detail/lu.hpp`.

[heading `detail::dimension_of<>`]

`dimension_of<T>::type` is type representing the dimension of `T`, or
`mpl::void_` if none exists.

Found in `boost/units_blas/detail/lu.hpp`.

[heading `detail::zero_value<>`]

`zero_value<T>::value()` returns an element of type `T `whose value is 0.

Found in `boost/units_blas/detail/zero_value.hpp`.

[heading `detail::one_value<>`]

`one_value<T>::value()` returns an element of type `T` whose value is 1.

Found in `boost/units_blas/detail/zero_value.hpp`.

[heading `detail::assign_to_value_type<>`]

`assign_from_value_type<T>::call<ValueType>(t, v)` assigns the internal value
representation of t to v.  Note that `ValueType` is not necessarily
`T::value_type`, though `T::value_type` must be convertible to `ValueType`.

Found in `boost/units_blas/detail/iteration.hpp`.

[heading `detail::assign_from_value_type<>`]

`assign_from_value_type<T>::call<ValueType>(t, v)` assigns v to the internal
value representation of t.  Note that `ValueType` is not necessarily
`T::value_type`, though `ValueType` must be convertible to `T::value_type`.

Found in `boost/units_blas/detail/iteration.hpp`.

[heading `detail::value_quotient<>`]

`value_quotient<T0, T1>::type` is the type of the expression `(T0(1) / T1(1))`.
The user should be sure to provide partial specializations for 3 cases:

# `T0` and `T1` are both unit types
# `T0` is a fundamental numeric type, `T1` is a unit type
# `T0` is a unit type, `T1` is a fundamental numeric type

Found in `boost/units_blas/result_of/detail/matrix_product.hpp`.

[heading `detail::value_inverse<>`]

`value_inverse<T>::type` is the dimensionally-inverse type for type `T`, such
that the type of the expression `(T() * value_inverse<T>::type())` is
dimensionless.  Whether the type should be an explicit dimensionless type
(e.g. a Boost.Units dimensionless quantity) or a fundamental numeric type
depends on the user's needs.

Found in `boost/units_blas/result_of/detail/matrix_product.hpp`.

[endsect]
