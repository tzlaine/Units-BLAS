[/
 / Copyright (c) 2008 T. Zachary Laine
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[import ../example/kalman.cpp]

[section:example Example: A Kalman Tracker]

Before we get to the meat of the example, we need some basics.  First, the
UnitsBlas boilerplate used throughout the documentation:

[units_blas_boilerplate]

Now, some Boost.Units quantity types for use below.  We'll get to why we chose
this set of quantities in a bit.

[boost_units_typedefs]

Now, on to the meat.  [@http://en.wikipedia.org/wiki/Kalman_filter Kalman
filtering] is a means of estimating the state of a dynamic system from noisy
measurements.

I am going to briefly describe the operation of a Kalman filter used to track
entities moving in a plane.  The equations used are fairly simple, but their
large number, and the large number of elements in the matrices used in the
equations, introduce numerous opportunities to get unit conversions and
dimensional analysis wrong, if they must be done by hand.  It is therefore
problem that prompted the creation of this library.

At a high level, a Kalman filter takes a series of measurements at various
times, and produces an estimate of the "true" measurement at those times.  It
does this for some time `t1` by:

# predicting the Kalman state at time `t1` based on the dynamics of the process being filtered, and the previous state at time `t0`; and
# updating the Kalman state using the predicted state and a measurement *z* taken at time `t0`.

The system being modelled in our Kalman tracker is an object with constant
velocity moving in a plane.  So, measurements *z* of this object are:

__meas_vector__ __meas_vector_units__

[meas_type]

Note that we do not directly try to model the object's position.  Instead we
model the state of the dyamic system.  Because of this, the state we are
estimating also contains the derivatives of the *z*'s elements with respect to
time (represented with a dot), so the state *x* is:

__state_vector__ __state_vector_units__

[state_type]

We also need to represent the uncertainty in the estimated state with a
covariance matrix *P*.  Each element of *P* is the covariance of the two
elements of the the state *x* noted in the element's subscript.

__p_matrix__ __p_matrix_units__

[P_type]

Here are the equations for the Kalman tracker's prediction step:

__predict_equations__

[prediction_step]

[*Q] is a covariance matrix representing process noise.  It has the same units
as *P*.

[Q_type]

[*F] is a bit more interesting, from a dimensional analysis point of view.
[*F] represents the system's dynamics.  In this case, we are estimating the
state of a constant velocity system.  Therefore we choose an *F* that updates
the position elements with the constant velocity times the time interval, and
leaves the velocity elements unchanged:

__f_matrix__,

which implies

__f_times_x__,

which is exactly what we want.

Note that due to its assignment to *x'*,

__f_times_x_units__

This implies what the the units of *F* must be.  This is our first nontrivial
result of using matrices containing quantity types (dimensionless quantities
are represented with the empty set symbol):

__f_matrix_units__

[F_type]

Many people who see this for the first time find it counterintuitive that the
zero-valued elements are neither uniformly dimensionless, nor uniformly
dimensional.  Moreover, I have yet to meet anyone who found the types in this
matrix as a whole obvious or intuitive.

Given the predicted state *x'* and predicted covariance matrix *P'* and a
measurement *z*, here are the equations for the update step:

__update_equations__

[update_step]

[*R] is a covariance matrix representing measurement noise.

__r_matrix__ __r_matrix_units__

[R_type]

[*H] is the observation model.  It maps state vectors to measurement vectors.
In our case, the matrix should simply pluck out the position elements of the
state, leaving the velocity elements behind.

__h_matrix__ __h_matrix_units__

[H_type]

Here is another nonobvious result.  As was the case with *F*, the 1-valued
elements are dimensionless.  This makes sense when you consider the fact that
1-valued elements are usually used to preserve values found in other matrices
when performing matrix products.  This implies that to preserve an element's
value /and its type/, one must multiply by 1-dimensionless.

There is deeper meaning associated with the *S* and *K* matrices, but for our
purposes, just think of them as being temporaries that are convenient to use
when performing the updates of *x* and *P*.  *S* has the same units as *R*.

[S_type]

[*K]'s units are:

__k_matrix_units__

[K_type]

So, what has been the point of this whole excersize?  By now you should be
convinced that getting the dimensional analysis right when dealing with a
large number of matrices involving dimensional types requires quite a bit of
thought, and is error prone simply because the analysis must be done in so
many places.  The solution to these problems often is only to use a fixed set
of units throughout your code.  Thus conversions to and from raw `value_type`s
are trivial, and unit conversions are never needed.  However, this requires
discipline, and if the discipline is ever dropped, the resulting errors can be
difficult to diagnose.

By using UnitsBlas, you can't avoid figuring out what the units should be for
all the matrices involved in this example, but once you have determined the
units, UnitsBlas will ensure that dimensional analysis and unit conversion rules
are not violated -- especially important as the code is maintained.

[endsect]
