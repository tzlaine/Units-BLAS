[/
 / Copyright (c) 2008 T. Zachary Laine
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[library Boost.UnitsBlas
    [quickbook 1.3]
    [authors [Laine, Zach]]
    [copyright 2008 T. Zachary Laine]
    [category template]
    [id units_blas]
    [dirname units_blas]
    [purpose
        Linear algebra library for matrices containing heterogeneous
        types, suitable for use with Boost.Units.
    ]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ QuickBook Document version 1.3 ]

[/ Images ]

[def __note__               [$images/note.png]]
[def __tip__                [$images/tip.png]]
[def __important__          [$images/important.png]]
[def __caution__            [$images/caution.png]]
[def __warning__            [$images/warning.png]]
[def __bad_determinant__    [$images/bad_determinant.png]]

[/ Links ]

[def _matrix_               [classref boost::units_blas::matrix `matrix<>`]]
[def _fus_vec_              [classref boost::fusion::vector `fusion_vector<>`]]
[def _is_vector_            [classref boost::units_blas::is_vector `is_vector<>`]]
[def _is_transpose_vector_  [classref boost::units_blas::is_transpose_vector `is_transpose_vector<>`]]
[def _slice__               [funcref boost::units_blas::slice `slice`]]
[def _slice_                [funcref boost::units_blas::slice `slice<>`]]
[def _transpose__           [funcref boost::units_blas::transpose `transpose`]]
[def _transpose_            [funcref boost::units_blas::transpose `transpose<>`]]
[def _element_prod__        [funcref boost::units_blas::element_prod `element_prod`]]
[def _element_prod_         [funcref boost::units_blas::element_prod `element_prod<>`]]
[def _element_div__         [funcref boost::units_blas::element_div `element_div`]]
[def _element_div_          [funcref boost::units_blas::element_div `element_div<>`]]
[def _determinant__         [funcref boost::units_blas::determinant `determinant`]]
[def _determinant_          [funcref boost::units_blas::determinant `determinant<>`]]
[def _inverse__             [funcref boost::units_blas::inverse `inverse`]]
[def _inverse_              [funcref boost::units_blas::inverse `inverse<>`]]
[def _prod__                [funcref boost::units_blas::prod `prod`]]
[def _prod_                 [funcref boost::units_blas::prod `prod<>`]]
[def _sum__                 [funcref boost::units_blas::sum `sum`]]
[def _sum_                  [funcref boost::units_blas::sum `sum<>`]]
[def _diff__                [funcref boost::units_blas::diff `diff`]]
[def _diff_                 [funcref boost::units_blas::diff `diff<>`]]
[def _neg__                 [funcref boost::units_blas::neg `neg`]]
[def _neg_                  [funcref boost::units_blas::neg `neg<>`]]
[def _dot__                 [funcref boost::units_blas::dot `dot`]]
[def _dot_                  [funcref boost::units_blas::dot `dot<>`]]
[def _cross__               [funcref boost::units_blas::cross `cross`]]
[def _cross_                [funcref boost::units_blas::cross `cross<>`]]
[def _norm_1__              [funcref boost::units_blas::norm_1 `norm_1`]]
[def _norm_1_               [funcref boost::units_blas::norm_1 `norm_1<>`]]
[def _norm_2__              [funcref boost::units_blas::norm_2 `norm_2`]]
[def _norm_2_               [funcref boost::units_blas::norm_2 `norm_2<>`]]
[def _norm_inf__            [funcref boost::units_blas::norm_inf `norm_inf`]]
[def _norm_inf_             [funcref boost::units_blas::norm_inf `norm_inf<>`]]
[def _norm_inf_index__      [funcref boost::units_blas::norm_inf_index `norm_inf_index`]]
[def _norm_inf_index_       [funcref boost::units_blas::norm_inf_index `norm_inf_index<>`]]
[def _solve__               [funcref boost::units_blas::solve `solve`]]
[def _solve_                [funcref boost::units_blas::solve `solve<>`]]
[def _value_                `quantity::value()`]
[def _from_value_           `quantity::from_value()`]



[/ External Links ]

[def _mpl_            [@http://boost.org/libs/mpl/doc/index.html MPL]]

[include intro.qbk]

[section:manual Manual]

[heading Conventions]

All matrix dimensions are given as ROWSxCOLUMNS, so a 1x3 matrix has 1 row and 3 columns.

Except where otherwise noted, it is assumed that all example code is preceded by:

    #include <boost/unts_blas.hpp>
    
    using namespace boost;

[include quick_start.qbk]

[section:tutorial Tutorial]

note that it is usually an error to create an identity matrix whose types are not dimensionless

note that cross products of vectors in a space S are in space S^2

note that zero elements of matrices often have units.

[endsect]

[section:header_organization Header Organization]

[endsect]

[section:configuration Configuration]



[endsect]

[endsect]

[section:adapting Adapting UnitsBlas To Other Units Libraries]

zero_value
one_value
matrix_to_temp_assign
assign_from_value_type
matrix_to_temp_vector_assign
value_quotient
value_inverse

[endsect]

[section:rationale Rationale]

This is an overridable configuration macro controlling whether compile-time
assertions should be used to enforce that the boost::units_blas::matrix template
parameter \a Rows is a boost::fusion::vector of boost::fusion::vector's.  It is
turned off by default.  If this is not set, consider a matrix<A>, where A is
fusion vectors as stated before, and matrix<B>, where B is a boost::mpl::vector
of boost::mpl::vector's.  Both matrices will function exactly the same, and in
fact have the same \a value_types type, but are different types.  To prevent
accidental code bloat due to this effect, define this macro to a nonzero value
before including any library header.

uniform_matrix name selection (vs. homogeneous_matrix)

[endsect]

[xinclude units_blas_reference.xml]
