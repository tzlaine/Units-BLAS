[/
 / Copyright (c) 2008 T. Zachary Laine
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[library Boost.UnitsBlas
    [quickbook 1.3]
    [authors [Laine, Zach]]
    [copyright 2008 T. Zachary Laine]
    [category template]
    [id units_blas]
    [dirname units_blas]
    [purpose
        Linear algebra library for matrices containing heterogeneous
        types, suitable for use with Boost.Units.
    ]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ QuickBook Document version 1.3 ]

[/ Images ]

[def __note__               [$images/note.png]]
[def __tip__                [$images/tip.png]]
[def __important__          [$images/important.png]]
[def __caution__            [$images/caution.png]]
[def __warning__            [$images/warning.png]]
[def __bad_determinant__    [$images/bad_determinant.png]]

[/ Links ]

[def _matrix_               [classref boost::units_blas::matrix `matrix<>`]]
[def _all_rows_             [classref boost::units_blas::all_rows `all_rows<>`]]
[def _row_                  [classref boost::units_blas::row `row<>`]]
[def _is_vector_            [classref boost::units_blas::is_vector `is_vector<>`]]
[def _is_transpose_vector_  [classref boost::units_blas::is_transpose_vector `is_transpose_vector<>`]]
[def _slice__               [funcref boost::units_blas::slice `slice`]]
[def _slice_                [funcref boost::units_blas::slice `slice<>`]]
[def _transpose__           [funcref boost::units_blas::transpose `transpose`]]
[def _transpose_            [funcref boost::units_blas::transpose `transpose<>`]]
[def _element_prod__        [funcref boost::units_blas::element_prod `element_prod`]]
[def _element_prod_         [funcref boost::units_blas::element_prod `element_prod<>`]]
[def _element_div__         [funcref boost::units_blas::element_div `element_div`]]
[def _element_div_          [funcref boost::units_blas::element_div `element_div<>`]]
[def _determinant__         [funcref boost::units_blas::determinant `determinant`]]
[def _determinant_          [funcref boost::units_blas::determinant `determinant<>`]]
[def _inverse__             [funcref boost::units_blas::inverse `inverse`]]
[def _inverse_              [funcref boost::units_blas::inverse `inverse<>`]]
[def _value_                `quantity::value()`]
[def _from_value_           `quantity::from_value()`]

[/ External Links ]

[def _mpl_            [@http://boost.org/libs/mpl/doc/index.html MPL]]

[include intro.qbk]

[section:manual Manual]

[heading Conventions]

All matrix dimensions are given as ROWSxCOLUMNS, so a 1x3 matrix has one row and 3 columns.

Except where otherwise noted, it is assumed that all example code is preceded by:

    #include <boost/unts_blas.hpp>
    
    using namespace boost;

[section:quick_start Quick Start]

[heading Matrices]

Matrices are declared in the form:

    unts_blas::matrix<
        units_blas::all_rows<
            units_blas::row< ... >,
            units_blas::row< ... >
            ...
        >
    > MyMatrix;

For example, assuming there exist three `quantity` types `length`, `time`, and `frequency`, these are all valid matrices:

    // a 1x3 matrix
    unts_blas::matrix<
        units_blas::all_rows<
            units_blas::row<length, time, frequency>
        >
    > MatrixType1;
    
    // a 3x1 matrix
    unts_blas::matrix<
        units_blas::all_rows<
            units_blas::row<length>,
            units_blas::row<time>,
            units_blas::row<frequency>
        >
    > MatrixType2;
    
    // a 2x2 matrix
    unts_blas::matrix<
        units_blas::all_rows<
            units_blas::row<length, time>,
            units_blas::row<frequency, time>
        >
    > MatrixType3;

Note that the size of a _matrix_ is limited by the maximum number of elements allowed in an _all_rows_ object, and by
the maximum number of elements in a _row_ object.  By default, the max for each is 10.  To increase it, you must define
`FUSION_MAX_VECTOR_SIZE` before including any UnitsBlas or Fusion header.  For example:

    #define FUSION_MAX_VECTOR_SIZE 20

[heading Operations On Matrices]

By default, UnitsBlas provides operator overloads where they make sense.  So, to multiply two matrices `m1` and `m2`,
write:

    m1 * m2

To multiply matrix `m` by a scalar `s`, write:

    m * s

or:

    s * m

Here is a summary of the operations on matrices.  In the table below, `M1` and `M2` are _matrix_ objects, and `s`
is a scalar, `Rows` and `Columns` are _mpl_ type sequences containing integral constants, and `ei` is an element of
_matrix_ `Mi`.

[table Matrix Operations
    [[Operation] [Description] [Notes]]
    [[`M1 += M2`]                      [ Elementwise addition. ]                    []]
    [[`M1 -= M2`]                      [ Elementwise subtraction. ]                 []]
    [[`M1 *= s`]                       [ Matrix-scalar product. ]                   [ Won't compile if `e1 = typeof(e1 * s)` doesn't compile. ]]
    [[`M1 /= s`]                       [ Matrix-scalar division. ]                  [ Won't compile if `e1 = typeof(e1 / s)` doesn't compile. ]]
    [[`-M1`]                           [ Elementwise negation. ]                    []]
    [[`M1 - M2`]                       [ Elementwise subtraction. ]                 []]
    [[`M1 + M2`]                       [ Elementwise addition. ]                    []]
    [[`M1 * M2`]                       [ Matrix-matrix product. ]                   []]
    [[`M1 * s`]                        [ Matrix-scalar product. ]                   []]
    [[`s * M1`]                        [ Matrix-scalar product. ]                   []]
    [[_slice__`<Rows, Columns>(M1)`]   [ Rows and columns of original matrix. ]     []]
    [[_transpose__`(M1)`]              [ Matrix transpose. ]                        []]
    [[_element_prod__`(M1, M2)`]       [ Elementwise product. ]                     []]
    [[_element_div__`(M1, M2)`]        [ Elementwise division. ]                    []]
    [[_determinant__`(M1)`]            [ Matrix determinant. ]                      []]
    [[_inverse__`(M1)`]                [ Matrix inverse. ]                          [ Throws if `M1` is singular. ]]
]

[heading Vectors]

There are no vector types in UnitsBlas.  Vectors are merely degenerate matrices.  All the UnitsBlas vector operations
accept _matrix_ parameters of the appropriate dimensions (either 1xN or Nx1).  Overloads are provided for both
orientations where approprate.  Two vector predicate metafunctions are provided, _is_vector_ and _is_transpose_vector_.
The first evaluates to true iff its given argument is a _matrix_ and has one row.  The second evaluates to true iff its
given argument is a _matrix_ and has one column.

[endsect]

[section:tutorial Tutorial]

[endsect]

[section:header_organization Header Organization]

[endsect]

[section:adapting Adapting UnitsBlas To Other Units Libraries]

[endsect]

[endsect]

[xinclude units_blas_reference.xml]
