[/
 / Copyright (c) 2008 T. Zachary Laine
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:configuration Configuration]

There are several configuration macros that affect the operation of UntisBlas directly.

[heading `BOOST_UNITS_BLAS_USE_OPERATORS_FOR_MATRIX_OPERATIONS`]

The use of operator overloads is nearly always controversial among C++ users.
While operator overloads are defined for many UnitsBlas functions, named
replacements are also available for each (e.g. `operator*()` versus `prod()`).
To disable the use of operators completely, define
`BOOST_UNITS_BLAS_USE_OPERATORS_FOR_MATRIX_OPERATIONS` to be zero before
including any library header.

[heading `BOOST_UNITS_BLAS_USE_INEXACT_DETERMINANT_TYPE`]

Calculating the type of a determinant is a surprisingly complex operation.  It
is (compile-time) O(n!) in the number of rows.  For even moderately-sized
matrices, this may impose an unrealistic compile-time burden for some users.
Since for matrices that have a determinant type T, T must be convertible to
the type of the products of the diagonals, UnitsBlas provides a simpler
`result_of::determinant` metafunction that uses only the diagonal elements.
Note that this *does not* produce the same results as the default
`result_of::determinant` in the general case!  For instance, consider this
matrix:

__bad_determinant__

It has no determinant that makes sense given its elements' types.  Yet, using
only its diagonals, the alternative `result_of::determinant` implementation
will ignorantly report a determinant type of ['m^2/s].  Other more subtle
problems crop up when different units are mixed in the same matrix, or when
units using different underlying `value_type`s are mixed in the same matrix.

To enable the simplified implementation of `result_of::determinant`, define
`BOOST_UNITS_BLAS_USE_INEXACT_DETERMINANT_TYPE` to be nonzero before including
any library header.

[tip If prohibitively long compile times are a problem, try using the default
`result_of::determinant` at first to check the validity of the determinant
type, then temporarily switch to the simpler alternative.  Don't forget to
switch back to the default implementation when you're finished with frequent
recompilation.]

[heading `FUSION_MAX_VECTOR_SIZE`]

UnitsBlas relies heavily on Boost.Fusion.  The internal storage of _matrix_ is
just a `fusion::vector` of `fusion::vector`s.  As such, you may need to be
aware of the `FUSION_MAX_VECTOR_SIZE`, which controls the maximum arity of the
`fusion::vector` template.  See the Boost.Fusion documentation for more
details.

[heading `BOOST_NO_EXCEPTIONS`]

Any operation involving matrix inversion in UnitsBlas may throw when a
singular matrix is encoutered.  As with many other Boost libraries,
`BOOST_NO_EXCEPTIONS` may be defined to replace the `throw` with a call to a
user-defined function.  See the
[@http://www.boost.org/libs/utility/throw_exception.html `throw_exception`
documentation] for details.

[endsect]
